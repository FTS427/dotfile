# Path
PATH="$PATH:/home/fts427/.local/bin"
export PATH="$PATH:/home/fts427/.dotnet/tools"

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=999999999
SAVEHIST=999999999

# Beep
setopt beep
bindkey -e
zstyle :compinstall filename '/home/fts427/.zshrc'

# Repo
export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo'

# Plugins
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#source /usr/share/fzf/key-bindings.zsh
#source /usr/share/fzf/completion.zsh
#source /home/fts427/app/zshp/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh

# Alias
alias ls='lsd'
alias la='lsd -a'
alias ll='lsd -l'
alias vimrc='vim ~/.vimrc'
alias zshrc='vim ~/.zshrc'
alias upgrub='sudo update-grub'
alias fastgh='sudo fastgithub start'
alias reboot='sudo reboot'
alias shutdown='sudo shutdown now'
alias showip='ip addr|grep -i "enp0s25"'
alias unxz='tar -xf'
alias untgz='tar -zxvf'
alias dfg='df --block-size=GB'

# Key Map
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\e[5~" beginning-of-history
bindkey "\e[6~" end-of-history
# rxvt
bindkey "\e[8~" end-of-line
bindkey "\e[7~" beginning-of-line
# for non RH/Debian xterm, can't hurt for RH/DEbian xterm
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
# for freebsd console
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line
# completion in the middle of a line
bindkey '^i' expand-or-complete-prefix

# Rust
fpath+=~/.zfunc

# PiPy
__pip() {
compadd $( COMP_WORDS="$words[*]" \
COMP_CWORD=$((CURRENT-1)) \
PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null )
}
if [[ $zsh_eval_context[-1] == loadautofunc ]]; then
__pip "$@"
#else
#compdef __pip -P 'pip[0-9.]#'
fi

# Git
autoload -Uz compinit && compinit
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%b'

# Prompt
PROMPT='%B%F{cyan}[%n]%f@%F{blue}[%m]%F{green}[%1~]%f%b> '
RPROMPT='%B%F{yellow}['\$vcs_info_msg_0_']%f%F{white}[%*][%D]%f%b'

# Hypr
#export LANG=zh_CN.UTF-8
#export LANGUAGE=zh_CN:en_US
export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_QPA_PLATFORM="wayland;xcb"
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export QT_QPA_PLATFORMTHEME=qt5ct
export SDL_VIDEODRIVER=wayland
export _JAVA_AWT_WM_NONEREPARENTING=1
export GDK_BACKEND="wayland,x11"
export XDG_SESSION_TYPE=wayland
export XDG_SESSION_DESKTOP=Hyprland
export XDG_CURRENT_DESKTOP=Hyprland

# C Cache
export USE_CCACHE=1
export CCACHE_SLOPPINESS=file_macro,include_file_mtime,time_macros
export CCACHE_UMASK=002
export CCACHE_DIR=/var/tmp/ccache

#compdef fnm
eval "$(fnm env --use-on-cd --shell zsh)"
autoload -U is-at-least

_fnm() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--multishell-path=[Where the current node version link is stored. This value will be populated automatically by evaluating \`fnm env\` in your shell profile. Read more about it using \`fnm help env\`]:MULTISHELL_PATH:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_fnm_commands" \
"*::: :->fnm" \
&& ret=0
    case $state in
    (fnm)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:fnm-command-$line[1]:"
        case $line[1] in
            (list-remote)
_arguments "${_arguments_options[@]}" : \
'--filter=[Filter versions by a user-defined version or a semver range]:FILTER: ' \
'--lts=[Show only LTS versions (optionally filter by LTS codename)]' \
'--sort=[Version sorting order]:SORT:((desc\:"Sort versions in descending order (latest to earliest)"
asc\:"Sort versions in ascending order (earliest to latest)"))' \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--latest[Only show the latest matching version]' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(ls-remote)
_arguments "${_arguments_options[@]}" : \
'--filter=[Filter versions by a user-defined version or a semver range]:FILTER: ' \
'--lts=[Show only LTS versions (optionally filter by LTS codename)]' \
'--sort=[Version sorting order]:SORT:((desc\:"Sort versions in descending order (latest to earliest)"
asc\:"Sort versions in ascending order (earliest to latest)"))' \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--latest[Only show the latest matching version]' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
'--progress=[Show an interactive progress bar for the download status]:PROGRESS:(auto never always)' \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'(--latest)--lts[Install latest LTS]' \
'(--lts)--latest[Install latest version]' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::version -- A version string. Can be a partial semver or a LTS version name by the format lts/NAME:' \
&& ret=0
;;
(use)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--install-if-missing[Install the version if it isn'\''t installed yet]' \
'--silent-if-unchanged[Don'\''t output a message identifying the version being used if it will not change due to execution of this command]' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::version:' \
&& ret=0
;;
(env)
_arguments "${_arguments_options[@]}" : \
'--shell=[The shell syntax to use. Infers when missing]:SHELL:(bash zsh fish power-shell)' \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'(--shell)--json[Print JSON instead of shell commands]' \
'--multi[Deprecated. This is the default now]' \
'--use-on-cd[Print the script to change Node versions every directory change]' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'--shell=[The shell syntax to use. Infers when missing]:SHELL:(bash zsh fish power-shell)' \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(alias)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':to_version:' \
':name:' \
&& ret=0
;;
(unalias)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':requested_alias:' \
&& ret=0
;;
(default)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':version:' \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(exec)
_arguments "${_arguments_options[@]}" : \
'--using=[Either an explicit version, or a filename with the version written in it]:VERSION: ' \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--using-file[Deprecated. This is the default now]' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::arguments -- The command to run:' \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
'--node-dist-mirror=[<https\://nodejs.org/dist/> mirror]:NODE_DIST_MIRROR: ' \
'--fnm-dir=[The root directory of fnm installations]:BASE_DIR:_files' \
'--log-level=[The log level of fnm commands]:LOG_LEVEL:(quiet error info)' \
'--arch=[Override the architecture of the installed Node binary. Defaults to arch of fnm binary]:ARCH: ' \
'--version-file-strategy=[A strategy for how to resolve the Node version. Used whenever \`fnm use\` or \`fnm install\` is called without a version, or when \`--use-on-cd\` is configured on evaluation]:VERSION_FILE_STRATEGY:((local\:"Use the local version of Node defined within the current directory"
recursive\:"Use the version of Node defined within the current directory and all parent directories"))' \
'--corepack-enabled[Enable corepack support for each new installation. This will make fnm call \`corepack enable\` on every Node.js installation. For more information about corepack see <https\://nodejs.org/api/corepack.html>]' \
'--resolve-engines[Resolve \`engines.node\` field in \`package.json\` whenever a \`.node-version\` or \`.nvmrc\` file is not present. Experimental\: This feature is subject to change. Note\: \`engines.node\` can be any semver range, with the latest satisfying version being resolved.]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::version:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_fnm__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:fnm-help-command-$line[1]:"
        case $line[1] in
            (list-remote)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(use)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(env)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(alias)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(unalias)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(default)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(exec)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_fnm_commands] )) ||
_fnm_commands() {
    local commands; commands=(
'list-remote:List all remote Node.js versions' \
'ls-remote:List all remote Node.js versions' \
'list:List all locally installed Node.js versions' \
'ls:List all locally installed Node.js versions' \
'install:Install a new Node.js version' \
'use:Change Node.js version' \
'env:Print and set up required environment variables for fnm' \
'completions:Print shell completions to stdout' \
'alias:Alias a version to a common name' \
'unalias:Remove an alias definition' \
'default:Set a version as the default version' \
'current:Print the current Node.js version' \
'exec:Run a command within fnm context' \
'uninstall:Uninstall a Node.js version' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'fnm commands' commands "$@"
}
(( $+functions[_alias_commands] )) ||
_alias_commands() {
    local commands; commands=()
    _describe -t commands 'alias commands' commands "$@"
}
(( $+functions[_completions_commands] )) ||
_completions_commands() {
    local commands; commands=()
    _describe -t commands 'completions commands' commands "$@"
}
(( $+functions[_current_commands] )) ||
_current_commands() {
    local commands; commands=()
    _describe -t commands 'current commands' commands "$@"
}
(( $+functions[_default_commands] )) ||
_default_commands() {
    local commands; commands=()
    _describe -t commands 'default commands' commands "$@"
}
(( $+functions[_env_commands] )) ||
_env_commands() {
    local commands; commands=()
    _describe -t commands 'env commands' commands "$@"
}
(( $+functions[_exec_commands] )) ||
_exec_commands() {
    local commands; commands=()
    _describe -t commands 'exec commands' commands "$@"
}
(( $+functions[_fnm__help_commands] )) ||
_fnm__help_commands() {
    local commands; commands=(
'list-remote:List all remote Node.js versions' \
'list:List all locally installed Node.js versions' \
'install:Install a new Node.js version' \
'use:Change Node.js version' \
'env:Print and set up required environment variables for fnm' \
'completions:Print shell completions to stdout' \
'alias:Alias a version to a common name' \
'unalias:Remove an alias definition' \
'default:Set a version as the default version' \
'current:Print the current Node.js version' \
'exec:Run a command within fnm context' \
'uninstall:Uninstall a Node.js version' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'fnm help commands' commands "$@"
}
(( $+functions[_fnm__help__alias_commands] )) ||
_fnm__help__alias_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help alias commands' commands "$@"
}
(( $+functions[_fnm__help__completions_commands] )) ||
_fnm__help__completions_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help completions commands' commands "$@"
}
(( $+functions[_fnm__help__current_commands] )) ||
_fnm__help__current_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help current commands' commands "$@"
}
(( $+functions[_fnm__help__default_commands] )) ||
_fnm__help__default_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help default commands' commands "$@"
}
(( $+functions[_fnm__help__env_commands] )) ||
_fnm__help__env_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help env commands' commands "$@"
}
(( $+functions[_fnm__help__exec_commands] )) ||
_fnm__help__exec_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help exec commands' commands "$@"
}
(( $+functions[_fnm__help__help_commands] )) ||
_fnm__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help help commands' commands "$@"
}
(( $+functions[_fnm__help__install_commands] )) ||
_fnm__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help install commands' commands "$@"
}
(( $+functions[_fnm__help__list_commands] )) ||
_fnm__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help list commands' commands "$@"
}
(( $+functions[_fnm__help__list-remote_commands] )) ||
_fnm__help__list-remote_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help list-remote commands' commands "$@"
}
(( $+functions[_fnm__help__unalias_commands] )) ||
_fnm__help__unalias_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help unalias commands' commands "$@"
}
(( $+functions[_fnm__help__uninstall_commands] )) ||
_fnm__help__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help uninstall commands' commands "$@"
}
(( $+functions[_fnm__help__use_commands] )) ||
_fnm__help__use_commands() {
    local commands; commands=()
    _describe -t commands 'fnm help use commands' commands "$@"
}
(( $+functions[_install_commands] )) ||
_install_commands() {
    local commands; commands=()
    _describe -t commands 'install commands' commands "$@"
}
(( $+functions[_list_commands] )) ||
_list_commands() {
    local commands; commands=()
    _describe -t commands 'list commands' commands "$@"
}
(( $+functions[_list-remote_commands] )) ||
_list-remote_commands() {
    local commands; commands=()
    _describe -t commands 'list-remote commands' commands "$@"
}
(( $+functions[_unalias_commands] )) ||
_unalias_commands() {
    local commands; commands=()
    _describe -t commands 'unalias commands' commands "$@"
}
(( $+functions[_uninstall_commands] )) ||
_uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'uninstall commands' commands "$@"
}
(( $+functions[_use_commands] )) ||
_use_commands() {
    local commands; commands=()
    _describe -t commands 'use commands' commands "$@"
}

if [ "$funcstack[1]" = "_fnm" ]; then
    _fnm "$@"
else
    compdef _fnm fnm
fi
