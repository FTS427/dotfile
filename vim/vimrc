" Basic settings
set number  			" 显示行号
set incsearch           " 实时开启搜索高亮
set hlsearch			" 搜索结果高亮
set autoindent			" 自动缩进
set smartindent			" 智能缩进
set tabstop=4			" 设置tab制表符号所占宽度为4
set softtabstop=4		" 设置按tab时缩进宽度为4
set shiftwidth=4		" 设置自动缩进宽度为4
set expandtab			" 缩进时将tab制表服转为空格
set smartcase           " 开启智能大小写查找
set encoding=utf-8      " 使用UTF-8
set showcmd             " 显示命令输出
set clipboard=unnamedplus " 开启系统剪切板
set cursorline          " 高亮当前行
set ignorecase          " 设置忽略大小写
set smartcase           " 设置智能大小写
set ruler               " 设置显示当前位置
filetype on			" 开启文件类型检测
filetype plugin indent on  " 开启文件类型插件检测
syntax on 			" 开启语法高亮

" C, C++ build
map <F5> :call ClangCompileC()<CR>
func! ClangCompileC()
    exec "w"
    if &filetype == 'c'
        exec "!clang % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!clang++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'sh'
        :!./%
    endif
endfunc

" C,C++ debug
map <F8> :call Rungdb()<CR>
func! Rungdb()
    exec "w"
    exec "!g++ % -g -o %<"
    exec "!gdb ./%<"
endfunc

" Plugins
call plug#begin('~/.vim/plugged')

Plug 'ryanoasis/vim-devicons'
Plug 'valloric/youcompleteme'
Plug 'nordtheme/vim'
Plug 'rust-lang/rust.vim'
Plug 'frazrepo/vim-rainbow'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'jiangmiao/auto-pairs'

call plug#end()

" Color
colorscheme nord
let g:rainbow_active=1

" cpp highlight
let g:cpp_class_scope_highlight=1
let g:cpp_variable_highlight=1
let g:cpp_class_decl_highlight=1
let g:cpp_posix_standard = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1

" lightline
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \     'active': {
      \         'left': [
      \             [ 'mode', 'paste' ],
      \             [ 'gitbranch' ,'readonly', 'filename', 'modified' ]
      \         ],
      \         'right': [
      \             [ 'lineinfo' ], [ 'percent' ],
      \             [ 'fileformat', 'fileencoding', 'filetype' ]
      \         ]
      \     }
      \ }

" YouCompleteMe
set runtimepath+=~/.vim/plugged/youcompleteme
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_show_diagnostics_ui = 1                           " 禁用语法检查
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" |            " 回车即选中当前项
nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|     " 跳转到定义处
let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项

